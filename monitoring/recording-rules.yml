# Prometheus Recording Rules for DeFiLlama Self-hosted Supabase
# Pre-compute frequently used queries for better performance

groups:
  # System metrics aggregations
  - name: system_metrics
    interval: 30s
    rules:
      - record: instance:node_cpu_utilization:rate5m
        expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
        
      - record: instance:node_memory_utilization:ratio
        expr: 1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)
        
      - record: instance:node_disk_utilization:ratio
        expr: 1 - (node_filesystem_avail_bytes{fstype!="tmpfs"} / node_filesystem_size_bytes{fstype!="tmpfs"})
        
      - record: instance:node_network_receive_bytes:rate5m
        expr: rate(node_network_receive_bytes_total[5m])
        
      - record: instance:node_network_transmit_bytes:rate5m
        expr: rate(node_network_transmit_bytes_total[5m])

  # Database metrics aggregations
  - name: database_metrics
    interval: 30s
    rules:
      - record: postgres:connections:total
        expr: sum(pg_stat_activity_count)
        
      - record: postgres:connections:utilization
        expr: sum(pg_stat_activity_count) / 1000
        
      - record: postgres:transactions:rate5m
        expr: rate(pg_stat_database_xact_commit[5m]) + rate(pg_stat_database_xact_rollback[5m])
        
      - record: postgres:queries:rate5m
        expr: rate(pg_stat_statements_calls[5m])
        
      - record: postgres:slow_queries:rate5m
        expr: rate(pg_stat_statements_calls{query_time > 1}[5m])
        
      - record: postgres:cache_hit_ratio
        expr: sum(pg_stat_database_blks_hit) / (sum(pg_stat_database_blks_hit) + sum(pg_stat_database_blks_read))
        
      - record: postgres:replication_lag:seconds
        expr: pg_replication_lag
        
      - record: postgres:deadlocks:rate5m
        expr: rate(pg_stat_database_deadlocks[5m])

  # Redis metrics aggregations
  - name: redis_metrics
    interval: 30s
    rules:
      - record: redis:memory_utilization:ratio
        expr: redis_memory_used_bytes / redis_memory_max_bytes
        
      - record: redis:connections:total
        expr: redis_connected_clients
        
      - record: redis:commands:rate5m
        expr: rate(redis_commands_processed_total[5m])
        
      - record: redis:keyspace_hits:rate5m
        expr: rate(redis_keyspace_hits_total[5m])
        
      - record: redis:keyspace_misses:rate5m
        expr: rate(redis_keyspace_misses_total[5m])
        
      - record: redis:cache_hit_ratio
        expr: rate(redis_keyspace_hits_total[5m]) / (rate(redis_keyspace_hits_total[5m]) + rate(redis_keyspace_misses_total[5m]))
        
      - record: redis:evictions:rate5m
        expr: rate(redis_evicted_keys_total[5m])
        
      - record: redis:expired_keys:rate5m
        expr: rate(redis_expired_keys_total[5m])

  # WebSocket metrics aggregations
  - name: websocket_metrics
    interval: 30s
    rules:
      - record: websocket:connections:total
        expr: websocket_connections_total
        
      - record: websocket:connections:utilization
        expr: websocket_connections_total / 50000
        
      - record: websocket:messages:rate5m
        expr: rate(websocket_messages_total[5m])
        
      - record: websocket:errors:rate5m
        expr: rate(websocket_errors_total[5m])
        
      - record: websocket:error_ratio
        expr: rate(websocket_errors_total[5m]) / rate(websocket_messages_total[5m])
        
      - record: websocket:latency:p50
        expr: histogram_quantile(0.50, rate(websocket_message_duration_seconds_bucket[5m]))
        
      - record: websocket:latency:p95
        expr: histogram_quantile(0.95, rate(websocket_message_duration_seconds_bucket[5m]))
        
      - record: websocket:latency:p99
        expr: histogram_quantile(0.99, rate(websocket_message_duration_seconds_bucket[5m]))

  # API Gateway metrics aggregations
  - name: api_gateway_metrics
    interval: 30s
    rules:
      - record: kong:requests:rate5m
        expr: rate(kong_http_status[5m])
        
      - record: kong:requests_2xx:rate5m
        expr: rate(kong_http_status{code=~"2.."}[5m])
        
      - record: kong:requests_4xx:rate5m
        expr: rate(kong_http_status{code=~"4.."}[5m])
        
      - record: kong:requests_5xx:rate5m
        expr: rate(kong_http_status{code=~"5.."}[5m])
        
      - record: kong:error_ratio
        expr: rate(kong_http_status{code=~"5.."}[5m]) / rate(kong_http_status[5m])
        
      - record: kong:latency:p50
        expr: histogram_quantile(0.50, rate(kong_latency_bucket[5m]))
        
      - record: kong:latency:p95
        expr: histogram_quantile(0.95, rate(kong_latency_bucket[5m]))
        
      - record: kong:latency:p99
        expr: histogram_quantile(0.99, rate(kong_latency_bucket[5m]))
        
      - record: kong:bandwidth:receive_rate5m
        expr: rate(kong_bandwidth_bytes{type="ingress"}[5m])
        
      - record: kong:bandwidth:transmit_rate5m
        expr: rate(kong_bandwidth_bytes{type="egress"}[5m])

  # Supabase Realtime metrics aggregations
  - name: realtime_metrics
    interval: 30s
    rules:
      - record: realtime:channels:total
        expr: realtime_channels_total
        
      - record: realtime:channels:utilization
        expr: realtime_channels_total / 50000
        
      - record: realtime:events:rate5m
        expr: rate(realtime_events_total[5m])
        
      - record: realtime:events:utilization
        expr: rate(realtime_events_total[5m]) / 100000
        
      - record: realtime:broadcasts:rate5m
        expr: rate(realtime_broadcasts_total[5m])
        
      - record: realtime:presence:rate5m
        expr: rate(realtime_presence_total[5m])

  # Business metrics aggregations
  - name: business_metrics
    interval: 1m
    rules:
      - record: defillama:subscriptions:rate5m
        expr: rate(defillama_subscriptions_total[5m])
        
      - record: defillama:unsubscriptions:rate5m
        expr: rate(defillama_unsubscriptions_total[5m])
        
      - record: defillama:active_subscriptions:total
        expr: defillama_subscriptions_total - defillama_unsubscriptions_total
        
      - record: defillama:events:rate5m
        expr: rate(defillama_events_processed_total[5m])
        
      - record: defillama:alerts:rate5m
        expr: rate(defillama_alerts_triggered_total[5m])
        
      - record: defillama:notifications:rate5m
        expr: rate(defillama_notifications_sent_total[5m])
        
      - record: defillama:queries:rate5m
        expr: rate(defillama_queries_executed_total[5m])
        
      - record: defillama:cache_hits:rate5m
        expr: rate(defillama_cache_hits_total[5m])
        
      - record: defillama:cache_misses:rate5m
        expr: rate(defillama_cache_misses_total[5m])
        
      - record: defillama:cache_hit_ratio
        expr: rate(defillama_cache_hits_total[5m]) / (rate(defillama_cache_hits_total[5m]) + rate(defillama_cache_misses_total[5m]))

  # Docker container metrics aggregations
  - name: docker_metrics
    interval: 30s
    rules:
      - record: container:cpu_utilization:rate5m
        expr: rate(container_cpu_usage_seconds_total{name!=""}[5m]) * 100
        
      - record: container:memory_utilization:ratio
        expr: container_memory_usage_bytes{name!=""} / container_spec_memory_limit_bytes{name!=""}
        
      - record: container:network_receive:rate5m
        expr: rate(container_network_receive_bytes_total{name!=""}[5m])
        
      - record: container:network_transmit:rate5m
        expr: rate(container_network_transmit_bytes_total{name!=""}[5m])
        
      - record: container:restarts:rate5m
        expr: rate(container_last_seen{name!=""}[5m])

  # Availability metrics (SLA tracking)
  - name: availability_metrics
    interval: 1m
    rules:
      - record: service:availability:5m
        expr: avg_over_time(up[5m])
        
      - record: service:availability:1h
        expr: avg_over_time(up[1h])
        
      - record: service:availability:24h
        expr: avg_over_time(up[24h])
        
      - record: service:availability:7d
        expr: avg_over_time(up[7d])
        
      - record: service:availability:30d
        expr: avg_over_time(up[30d])

  # Performance metrics (SLO tracking)
  - name: performance_metrics
    interval: 1m
    rules:
      - record: api:latency:p95:5m
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))
        
      - record: api:latency:p99:5m
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))
        
      - record: api:success_rate:5m
        expr: rate(http_requests_total{status=~"2.."}[5m]) / rate(http_requests_total[5m])
        
      - record: api:error_rate:5m
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])
        
      - record: websocket:latency:p95:5m
        expr: histogram_quantile(0.95, rate(websocket_message_duration_seconds_bucket[5m]))
        
      - record: websocket:latency:p99:5m
        expr: histogram_quantile(0.99, rate(websocket_message_duration_seconds_bucket[5m]))
        
      - record: database:query_latency:p95:5m
        expr: histogram_quantile(0.95, rate(pg_stat_statements_mean_time_bucket[5m]))
        
      - record: database:query_latency:p99:5m
        expr: histogram_quantile(0.99, rate(pg_stat_statements_mean_time_bucket[5m]))

