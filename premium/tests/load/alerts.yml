# Artillery Load Test Configuration for DeFiLlama Premium Alerts
# Story 1.1.3: Load Testing for Alert System

config:
  target: 'http://localhost:3000'
  phases:
    # Phase 1: Warm up
    - duration: 60
      arrivalRate: 10
      name: "Warm up - 10 users/sec"
    
    # Phase 2: Sustained load
    - duration: 120
      arrivalRate: 50
      name: "Sustained load - 50 users/sec"
    
    # Phase 3: Peak load
    - duration: 60
      arrivalRate: 100
      name: "Peak load - 100 users/sec"
    
    # Phase 4: Ramp down
    - duration: 30
      arrivalRate: 10
      name: "Ramp down - 10 users/sec"
  
  # Performance thresholds
  ensure:
    maxErrorRate: 1  # Max 1% error rate
    p95: 500         # 95th percentile < 500ms
    p99: 1000        # 99th percentile < 1s
  
  # HTTP settings
  http:
    timeout: 10
  
  # Plugins
  plugins:
    metrics-by-endpoint:
      stripQueryString: true
    
  # Variables
  variables:
    testUserId:
      - "user-load-test-1"
      - "user-load-test-2"
      - "user-load-test-3"
      - "user-load-test-4"
      - "user-load-test-5"

# Test Scenarios
scenarios:
  # Scenario 1: Create Whale Alert
  - name: "Create Whale Alert"
    weight: 20
    flow:
      - post:
          url: "/v2/premium/alerts/whale"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            name: "Load Test Whale Alert {{ $randomString() }}"
            type: "whale"
            conditions:
              chain: "ethereum"
              token: "USDT"
              threshold_usd: 1000000
            actions:
              channels: ["email"]
            enabled: true
          capture:
            - json: "$.data.id"
              as: "alertId"
      - think: 1
  
  # Scenario 2: Get Whale Alerts (List)
  - name: "Get Whale Alerts"
    weight: 50
    flow:
      - get:
          url: "/v2/premium/alerts/whale?page=1&limit=20"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
  
  # Scenario 3: Get Whale Alert by ID
  - name: "Get Whale Alert by ID"
    weight: 20
    flow:
      - get:
          url: "/v2/premium/alerts/whale/{{ alertId }}"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
  
  # Scenario 4: Update Whale Alert
  - name: "Update Whale Alert"
    weight: 5
    flow:
      - put:
          url: "/v2/premium/alerts/whale/{{ alertId }}"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            enabled: false
      - think: 1
  
  # Scenario 5: Toggle Whale Alert
  - name: "Toggle Whale Alert"
    weight: 3
    flow:
      - patch:
          url: "/v2/premium/alerts/whale/{{ alertId }}/toggle"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            enabled: true
      - think: 0.5
  
  # Scenario 6: Delete Whale Alert
  - name: "Delete Whale Alert"
    weight: 2
    flow:
      - delete:
          url: "/v2/premium/alerts/whale/{{ alertId }}"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
  
  # Scenario 7: Create Price Alert
  - name: "Create Price Alert"
    weight: 20
    flow:
      - post:
          url: "/v2/premium/alerts/price"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            name: "Load Test Price Alert {{ $randomString() }}"
            type: "price"
            conditions:
              token: "ETH"
              chain: "ethereum"
              alert_type: "above"
              threshold: 3000
            actions:
              channels: ["telegram"]
            enabled: true
      - think: 1
  
  # Scenario 8: Get Price Alerts
  - name: "Get Price Alerts"
    weight: 50
    flow:
      - get:
          url: "/v2/premium/alerts/price?page=1&limit=20"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
  
  # Scenario 9: Create Gas Alert
  - name: "Create Gas Alert"
    weight: 15
    flow:
      - post:
          url: "/v2/premium/alerts/gas"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            name: "Load Test Gas Alert {{ $randomString() }}"
            type: "gas"
            conditions:
              chain: "ethereum"
              gas_type: "standard"
              alert_type: "below"
              threshold_gwei: 20
            actions:
              channels: ["email"]
            enabled: true
      - think: 1
  
  # Scenario 10: Get Gas Predictions
  - name: "Get Gas Predictions"
    weight: 30
    flow:
      - get:
          url: "/v2/premium/gas/predictions?chain=ethereum"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.3
  
  # Scenario 11: Get Current Gas Prices
  - name: "Get Current Gas Prices"
    weight: 40
    flow:
      - get:
          url: "/v2/premium/gas/current?chain=ethereum"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.2
  
  # Scenario 12: Mixed Operations
  - name: "Mixed Operations"
    weight: 10
    flow:
      # Create whale alert
      - post:
          url: "/v2/premium/alerts/whale"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            name: "Mixed Test {{ $randomString() }}"
            type: "whale"
            conditions:
              chain: "ethereum"
              token: "USDC"
              threshold_usd: 500000
            actions:
              channels: ["email"]
      - think: 0.5
      
      # Get whale alerts
      - get:
          url: "/v2/premium/alerts/whale"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
      
      # Get gas predictions
      - get:
          url: "/v2/premium/gas/predictions?chain=ethereum"
          headers:
            Authorization: "Bearer test-token-{{ testUserId }}"
      - think: 0.5
      
      # Create price alert
      - post:
          url: "/v2/premium/alerts/price"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer test-token-{{ testUserId }}"
          json:
            name: "Mixed Price Alert {{ $randomString() }}"
            type: "price"
            conditions:
              token: "BTC"
              chain: "ethereum"
              alert_type: "below"
              threshold: 40000
            actions:
              channels: ["discord"]
      - think: 1

