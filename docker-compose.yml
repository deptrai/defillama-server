version: '3.8'

# DeFiLlama Server - Port Allocation: 3060-3139
# See docs/PORT-ALLOCATION.md for complete port mapping

services:
  # ============================================
  # Databases (3080-3089)
  # ============================================

  # PostgreSQL for main data storage
  postgres:
    image: postgres:15-alpine
    container_name: defillama-postgres
    environment:
      POSTGRES_DB: defillama
      POSTGRES_USER: defillama
      POSTGRES_PASSWORD: defillama123
    ports:
      - "3080:5432"  # Changed from 5004 to 3080
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dev-metrics/db-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U defillama"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # PostgreSQL Test Database
  postgres-test:
    image: postgres:14-alpine
    container_name: defillama-postgres-test
    environment:
      POSTGRES_DB: defillama_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test123
    ports:
      - "3081:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # ============================================
  # Message Queue & Cache (3070-3079)
  # ============================================

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: defillama-redis
    ports:
      - "3072:6379"  # Changed from 5005 to 3072
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: defillama-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "3070:5672"   # AMQP protocol
      - "3071:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - defillama-network

  # ============================================
  # Testing & Development (3100-3109)
  # ============================================

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: defillama-mailhog
    ports:
      - "3103:1025"  # SMTP
      - "3104:8025"  # Web UI
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # Telegram Mock Server for testing
  telegram-mock:
    build:
      context: ./premium/tests/mocks
      dockerfile: Dockerfile.telegram
    container_name: defillama-telegram-mock
    ports:
      - "3100:3100"
    environment:
      - PORT=3100
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # Discord Mock Server for testing
  discord-mock:
    build:
      context: ./premium/tests/mocks
      dockerfile: Dockerfile.discord
    container_name: defillama-discord-mock
    ports:
      - "3101:3101"
    environment:
      - PORT=3101
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3101/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # Webhook Mock Server for testing
  webhook-mock:
    build:
      context: ./premium/tests/mocks
      dockerfile: Dockerfile.webhook
    container_name: defillama-webhook-mock
    ports:
      - "3102:3102"
    environment:
      - PORT=3102
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3102/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - defillama-network

  # DynamoDB Local
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -optimizeDbBeforeStartup -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "5006:8000"  # Keep existing port for backward compatibility
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - defillama-network

# ============================================
# Networks
# ============================================

networks:
  defillama-network:
    driver: bridge
    name: defillama-network

# ============================================
# Volumes
# ============================================

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
