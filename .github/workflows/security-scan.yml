name: Security Scan

on:
  pull_request:
    branches:
      - main
      - master
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./defi
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        working-directory: ./defi
        run: |
          pnpm audit --audit-level=moderate --json > audit-report.json || true
          cat audit-report.json

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: defi/audit-report.json

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=defi/package.json --json-file-output=snyk-report.json

      - name: Upload Snyk report
        uses: actions/upload-artifact@v3
        with:
          name: snyk-report
          path: snyk-report.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: defi/resources/
          framework: cloudformation
          output_format: sarif
          output_file_path: checkov-report.sarif
          soft_fail: true

      - name: Upload Checkov report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-report.sarif

  docker-scan:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: false  # Disabled for now, enable when using Docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t defillama:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: defillama:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./defi
        run: pnpm install --frozen-lockfile

      - name: Run license checker
        working-directory: ./defi
        run: |
          npx license-checker --json --out licenses.json || true
          cat licenses.json

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: defi/licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, sast-scan, secrets-scan, infrastructure-scan, license-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Snyk Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Static Application Security Testing (SAST)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secrets Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Infrastructure Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ License Compliance Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed. Review artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## Security Scan Results
            
            All security scans have been completed. Please review the following:
            
            - ✅ Dependency Vulnerability Scan
            - ✅ Snyk Security Scan
            - ✅ Static Application Security Testing (SAST)
            - ✅ Secrets Scanning
            - ✅ Infrastructure Security Scan
            - ✅ License Compliance Scan
            
            Review the workflow artifacts for detailed results.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Notify Slack on critical findings
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Security Scan Found Critical Issues",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Security Scan Alert* ⚠️\n\nCritical security issues found in repository.\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

