name: Deploy to Staging

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
  DEPLOY_USER: ${{ secrets.STAGING_USER }}
  DEPLOY_PATH: /opt/defillama

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml

  build:
    name: Build Docker Images
    uses: ./.github/workflows/build.yml
    needs: test

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    environment:
      name: staging
      url: https://staging.defillama.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Add staging host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"

      - name: Copy docker-compose files
        run: |
          scp docker-compose.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
          scp docker-compose.supabase.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
          scp docker-compose.monitoring.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
          scp -r monitoring ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
          scp -r nginx ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
          scp -r supabase ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Copy environment files
        run: |
          scp defi/.env.staging ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/defi/.env

      - name: Pull latest images
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "cd ${{ env.DEPLOY_PATH }} && docker-compose pull"

      - name: Backup current deployment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            BACKUP_DIR=backups/\$(date +%Y%m%d-%H%M%S)
            mkdir -p \$BACKUP_DIR
            docker-compose ps -q | xargs -I {} docker inspect {} > \$BACKUP_DIR/containers.json
            cp docker-compose.yml \$BACKUP_DIR/
            echo \$BACKUP_DIR > .last_backup
          "

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            docker-compose -f docker-compose.yml \
                          -f docker-compose.supabase.yml \
                          -f docker-compose.monitoring.yml \
                          up -d --remove-orphans
          "

      - name: Wait for services to be healthy
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            echo 'Waiting for services to be healthy...'
            for i in {1..30}; do
              UNHEALTHY=\$(docker-compose ps | grep -v 'Up' | grep -v 'NAME' | wc -l)
              if [ \$UNHEALTHY -eq 0 ]; then
                echo '‚úÖ All services are healthy'
                exit 0
              fi
              echo \"Attempt \$i/30: \$UNHEALTHY services not healthy yet\"
              sleep 10
            done
            echo '‚ùå Services failed to become healthy'
            exit 1
          "

      - name: Run smoke tests
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}

            # Test PostgreSQL
            docker exec defillama-postgres pg_isready -U postgres || exit 1

            # Test Redis
            docker exec defillama-redis redis-cli ping || exit 1

            # Test Kong API Gateway
            curl -f http://localhost:8000/health || exit 1

            # Test Prometheus
            curl -f http://localhost:9090/-/healthy || exit 1

            # Test Grafana
            curl -f http://localhost:3002/api/health || exit 1

            echo '‚úÖ All smoke tests passed'
          "

      - name: Verify deployment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            echo '=== Deployment Verification ==='
            echo ''
            echo 'Running containers:'
            docker-compose ps
            echo ''
            echo 'Container health:'
            docker ps --format 'table {{.Names}}\t{{.Status}}'
            echo ''
            echo 'Disk usage:'
            docker system df
          "

      - name: Tag deployment
        run: |
          git tag -a "staging-$(date +%Y%m%d-%H%M%S)" -m "Staging deployment"
          git push origin --tags || echo "Failed to push tags"

      - name: Notify Slack - Success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚úÖ Staging Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Successful* ‚úÖ\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Environment:* Staging\n*URL:* https://staging.defillama.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ùå Staging Deployment Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Failed* ‚ùå\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Environment:* Staging\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://staging.defillama.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL Database" >> $GITHUB_STEP_SUMMARY
          echo "- Redis Cache" >> $GITHUB_STEP_SUMMARY
          echo "- Kong API Gateway" >> $GITHUB_STEP_SUMMARY
          echo "- Supabase Services" >> $GITHUB_STEP_SUMMARY
          echo "- Prometheus Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- Grafana Dashboards" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    timeout-minutes: 10

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Rollback deployment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            echo '‚ùå Deployment failed, initiating rollback...'

            # Get last backup directory
            BACKUP_DIR=\$(cat .last_backup)

            if [ -z \"\$BACKUP_DIR\" ]; then
              echo 'No backup found, cannot rollback'
              exit 1
            fi

            echo \"Rolling back to: \$BACKUP_DIR\"

            # Stop current containers
            docker-compose down

            # Restore backup
            cp \$BACKUP_DIR/docker-compose.yml ./

            # Start previous version
            docker-compose up -d

            echo '‚úÖ Rollback completed'
          "

      - name: Notify Slack - Rollback
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "üîÑ Staging Deployment Rolled Back",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Rolled Back* üîÑ\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Reason:* Deployment failed health checks"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

