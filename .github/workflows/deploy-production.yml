name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      traffic_shift_strategy:
        description: 'Traffic shift strategy'
        required: true
        type: choice
        options:
          - gradual
          - immediate
        default: gradual

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
  DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
  DEPLOY_PATH: /opt/defillama

jobs:
  approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    environment:
      name: production-approval
    steps:
      - name: Request approval
        run: |
          echo "🔐 Deployment to production requires manual approval"
          echo "📦 Version: ${{ github.event.inputs.version }}"
          echo "🚦 Traffic Strategy: ${{ github.event.inputs.traffic_shift_strategy }}"

  test:
    name: Run Full Test Suite
    needs: approval
    uses: ./.github/workflows/test.yml

  build:
    name: Build Production Images
    needs: test
    uses: ./.github/workflows/build.yml

  deploy-blue:
    name: Deploy Blue Environment (New Version)
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    environment:
      name: production-blue
      url: https://blue.defillama.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Add production host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Create blue deployment directory
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            mkdir -p ${{ env.DEPLOY_PATH }}/blue
            mkdir -p ${{ env.DEPLOY_PATH }}/backups
          "

      - name: Copy docker-compose files to blue
        run: |
          scp docker-compose.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/
          scp docker-compose.supabase.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/
          scp docker-compose.monitoring.yml ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/
          scp -r monitoring ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/
          scp -r nginx ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/
          scp -r supabase ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/

      - name: Copy production environment files
        run: |
          scp defi/.env.production ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/blue/defi/.env

      - name: Pull latest images for blue
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}/blue
            docker-compose pull
          "

      - name: Deploy blue environment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}/blue
            
            # Use different ports for blue environment
            export BLUE_PORT_OFFSET=1000
            export POSTGRES_PORT=6432
            export REDIS_PORT=7379
            export KONG_PORT=9000
            export GRAFANA_PORT=4002
            
            docker-compose -f docker-compose.yml \
                          -f docker-compose.supabase.yml \
                          -f docker-compose.monitoring.yml \
                          -p defillama-blue \
                          up -d --remove-orphans
          "

      - name: Wait for blue environment to be healthy
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}/blue
            echo 'Waiting for blue environment to be healthy...'
            for i in {1..60}; do
              UNHEALTHY=\$(docker-compose -p defillama-blue ps | grep -v 'Up' | grep -v 'NAME' | wc -l)
              if [ \$UNHEALTHY -eq 0 ]; then
                echo '✅ Blue environment is healthy'
                exit 0
              fi
              echo \"Attempt \$i/60: \$UNHEALTHY services not healthy yet\"
              sleep 10
            done
            echo '❌ Blue environment failed to become healthy'
            exit 1
          "

      - name: Run smoke tests on blue
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            # Test blue environment on different ports
            curl -f http://localhost:6432 || exit 1
            curl -f http://localhost:9000/health || exit 1
            echo '✅ Blue environment smoke tests passed'
          "

  traffic-shift-10:
    name: Shift 10% Traffic to Blue
    runs-on: ubuntu-latest
    needs: deploy-blue
    if: github.event.inputs.traffic_shift_strategy == 'gradual'
    timeout-minutes: 10

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Configure Nginx for 10% traffic
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            # Update Nginx config to send 10% traffic to blue
            cat > /etc/nginx/conf.d/blue-green.conf <<EOF
            upstream backend {
              server localhost:8000 weight=9;  # Green (90%)
              server localhost:9000 weight=1;  # Blue (10%)
            }
            EOF
            nginx -s reload
          "

      - name: Monitor for 5 minutes
        run: |
          echo "Monitoring 10% traffic shift for 5 minutes..."
          sleep 300

  traffic-shift-50:
    name: Shift 50% Traffic to Blue
    runs-on: ubuntu-latest
    needs: traffic-shift-10
    if: github.event.inputs.traffic_shift_strategy == 'gradual'
    timeout-minutes: 10

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Configure Nginx for 50% traffic
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cat > /etc/nginx/conf.d/blue-green.conf <<EOF
            upstream backend {
              server localhost:8000 weight=1;  # Green (50%)
              server localhost:9000 weight=1;  # Blue (50%)
            }
            EOF
            nginx -s reload
          "

      - name: Monitor for 5 minutes
        run: |
          echo "Monitoring 50% traffic shift for 5 minutes..."
          sleep 300

  traffic-shift-100:
    name: Shift 100% Traffic to Blue
    runs-on: ubuntu-latest
    needs: [deploy-blue, traffic-shift-50]
    if: always() && !failure() && !cancelled()
    timeout-minutes: 10

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Configure Nginx for 100% traffic to blue
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cat > /etc/nginx/conf.d/blue-green.conf <<EOF
            upstream backend {
              server localhost:9000;  # Blue (100%)
            }
            EOF
            nginx -s reload
          "

      - name: Monitor for 10 minutes
        run: |
          echo "Monitoring 100% traffic on blue for 10 minutes..."
          sleep 600

  promote-blue-to-green:
    name: Promote Blue to Green
    runs-on: ubuntu-latest
    needs: traffic-shift-100
    timeout-minutes: 15

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Backup current green
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            BACKUP_DIR=backups/green-\$(date +%Y%m%d-%H%M%S)
            mkdir -p \$BACKUP_DIR
            if [ -d green ]; then
              cp -r green/* \$BACKUP_DIR/
            fi
          "

      - name: Stop old green environment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}/green
            docker-compose -p defillama-green down || true
          "

      - name: Promote blue to green
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            rm -rf green
            cp -r blue green
            
            # Update green to use standard ports
            cd green
            unset BLUE_PORT_OFFSET
            docker-compose -p defillama-green down
            docker-compose -f docker-compose.yml \
                          -f docker-compose.supabase.yml \
                          -f docker-compose.monitoring.yml \
                          -p defillama-green \
                          up -d --remove-orphans
          "

      - name: Update Nginx to point to new green
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            cat > /etc/nginx/conf.d/blue-green.conf <<EOF
            upstream backend {
              server localhost:8000;  # Green (100%)
            }
            EOF
            nginx -s reload
          "

      - name: Tag successful deployment
        run: |
          git tag -a "production-${{ github.event.inputs.version }}" -m "Production deployment"
          git push origin --tags

      - name: Notify Slack - Success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Successful* ✅\n\n*Version:* ${{ github.event.inputs.version }}\n*Strategy:* ${{ github.event.inputs.traffic_shift_strategy }}\n*URL:* https://defillama.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

