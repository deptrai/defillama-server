name: Build Docker Images

on:
  push:
    branches:
      - main
      - master
      - dev
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        service:
          - name: api
            context: ./defi
            dockerfile: ./defi/Dockerfile
          - name: worker
            context: ./defi
            dockerfile: ./defi/Dockerfile.worker
          - name: scheduler
            context: ./defi
            dockerfile: ./defi/Dockerfile.scheduler

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/defillama-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=DeFiLlama ${{ matrix.service.name }}
            org.opencontainers.image.description=DeFiLlama On-Chain Services - ${{ matrix.service.name }}
            org.opencontainers.image.vendor=DeFiLlama
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service.name }}.sarif'
          category: 'trivy-${{ matrix.service.name }}'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}:${{ steps.meta.outputs.version }}
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: 'grype-${{ matrix.service.name }}'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ matrix.service.name }}.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.service.name }}
          path: sbom-${{ matrix.service.name }}.spdx.json
          retention-days: 30

      - name: Sign container image with Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      - name: Sign the images with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}@${{ steps.build.outputs.digest }}

      - name: Verify image signature
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}@${{ steps.build.outputs.digest }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- API Service" >> $GITHUB_STEP_SUMMARY
          echo "- Worker Service" >> $GITHUB_STEP_SUMMARY
          echo "- Scheduler Service" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scans" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy vulnerability scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Grype vulnerability scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image signing with Cosign" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Registry" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Container Registry (ghcr.io)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Hub (optional)" >> $GITHUB_STEP_SUMMARY

