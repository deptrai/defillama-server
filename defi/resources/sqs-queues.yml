# SQS Queues Configuration
# Story 1.2: Real-time Event Processor

Resources:
  # Main Events Queue
  EventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-events-queue-${self:provider.stage}
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventsDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Service
          Value: ${self:service}
        - Key: Stage
          Value: ${self:provider.stage}
        - Key: Component
          Value: events-queue

  # Dead Letter Queue
  EventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-events-dlq-${self:provider.stage}
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Service
          Value: ${self:service}
        - Key: Stage
          Value: ${self:provider.stage}
        - Key: Component
          Value: events-dlq

  # Queue Policy
  EventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref EventsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !GetAtt EventsQueue.Arn

  # CloudWatch Alarms for Queue
  EventsQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ${self:service}-events-queue-depth-${self:provider.stage}
      AlarmDescription: Alert when events queue has too many messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsQueue.QueueName
      TreatMissingData: notBreaching

  EventsDLQDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ${self:service}-events-dlq-depth-${self:provider.stage}
      AlarmDescription: Alert when DLQ has messages (indicates failures)
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsDLQ.QueueName
      TreatMissingData: notBreaching

  EventsQueueAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ${self:service}-events-queue-age-${self:provider.stage}
      AlarmDescription: Alert when messages are too old in queue
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 600  # 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsQueue.QueueName
      TreatMissingData: notBreaching

Outputs:
  EventsQueueUrl:
    Description: URL of the Events Queue
    Value: !Ref EventsQueue
    Export:
      Name: ${self:service}-events-queue-url-${self:provider.stage}

  EventsQueueArn:
    Description: ARN of the Events Queue
    Value: !GetAtt EventsQueue.Arn
    Export:
      Name: ${self:service}-events-queue-arn-${self:provider.stage}

  EventsDLQUrl:
    Description: URL of the Events Dead Letter Queue
    Value: !Ref EventsDLQ
    Export:
      Name: ${self:service}-events-dlq-url-${self:provider.stage}

  EventsDLQArn:
    Description: ARN of the Events Dead Letter Queue
    Value: !GetAtt EventsDLQ.Arn
    Export:
      Name: ${self:service}-events-dlq-arn-${self:provider.stage}

