/**
 * Vulnerability Scorer Tests
 * Story: 4.1.2 - MEV Protection Insights
 */

import { VulnerabilityScorer, VulnerabilityInput } from '../vulnerability-scorer';

describe('VulnerabilityScorer', () => {
  let scorer: VulnerabilityScorer;

  beforeEach(() => {
    scorer = VulnerabilityScorer.getInstance();
  });

  describe('Singleton Pattern', () => {
    it('should return the same instance', () => {
      const instance1 = VulnerabilityScorer.getInstance();
      const instance2 = VulnerabilityScorer.getInstance();
      expect(instance1).toBe(instance2);
    });
  });

  describe('Low Risk Scenarios', () => {
    it('should calculate low overall risk for safe transaction', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 1000,
        tx_value_usd: 1000,
        slippage_tolerance_pct: 0.30,
        expected_price_impact_pct: 0.20,
        pool_liquidity_usd: 10000000,
        pool_volume_24h_usd: 5000000,
        gas_price_gwei: 40,
        network_avg_gas_price_gwei: 50,
        mempool_pending_txs: 500,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.overall_score).toBeLessThan(30);
      expect(result.risk_category).toBe('low');
      expect(result.sandwich_risk).toBeLessThan(30);
      expect(result.frontrun_risk).toBeLessThan(30);
      expect(result.backrun_risk).toBeLessThan(30);
      expect(result.confidence_score).toBeGreaterThan(80);
    });
  });

  describe('Medium Risk Scenarios', () => {
    it('should calculate medium overall risk for moderate transaction', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 50000,
        tx_value_usd: 50000,
        slippage_tolerance_pct: 1.00,
        expected_price_impact_pct: 0.80,
        pool_liquidity_usd: 2000000,
        pool_volume_24h_usd: 1000000,
        gas_price_gwei: 80,
        network_avg_gas_price_gwei: 70,
        mempool_pending_txs: 3000,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.overall_score).toBeGreaterThanOrEqual(30);
      expect(result.overall_score).toBeLessThan(60);
      expect(result.risk_category).toBe('medium');
    });
  });

  describe('High Risk Scenarios', () => {
    it('should calculate high overall risk for risky transaction', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 120000,            // Reduced from 200K
        tx_value_usd: 120000,
        slippage_tolerance_pct: 1.50,     // Reduced from 2.00
        expected_price_impact_pct: 1.00,  // Reduced from 1.50
        pool_liquidity_usd: 1000000,      // Increased from 500K
        pool_volume_24h_usd: 500000,      // Increased from 200K
        gas_price_gwei: 120,              // Reduced from 150
        network_avg_gas_price_gwei: 100,
        mempool_pending_txs: 6000,        // Reduced from 8K
        block_time_seconds: 12,
        is_time_sensitive: false,         // Changed from true
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.overall_score).toBeGreaterThanOrEqual(60);
      expect(result.overall_score).toBeLessThan(80);
      expect(result.risk_category).toBe('high');
      expect(result.recommendations.length).toBeGreaterThan(0);
    });
  });

  describe('Critical Risk Scenarios', () => {
    it('should calculate critical overall risk for very risky transaction', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 500000,
        tx_value_usd: 500000,
        slippage_tolerance_pct: 5.00,
        expected_price_impact_pct: 3.00,
        pool_liquidity_usd: 100000,
        pool_volume_24h_usd: 50000,
        gas_price_gwei: 250,
        network_avg_gas_price_gwei: 100,
        mempool_pending_txs: 15000,
        block_time_seconds: 12,
        is_time_sensitive: true,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.overall_score).toBeGreaterThanOrEqual(80);
      expect(result.risk_category).toBe('critical');
      expect(result.sandwich_risk).toBeGreaterThan(70);
      expect(result.frontrun_risk).toBeGreaterThan(70);
      expect(result.backrun_risk).toBeGreaterThan(70);
      expect(result.recommendations).toContain('CRITICAL: Consider canceling this transaction');
    });
  });

  describe('Weighted Average Calculation', () => {
    it('should calculate weighted average correctly (50% sandwich, 30% frontrun, 20% backrun)', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 100000,
        tx_value_usd: 100000,
        slippage_tolerance_pct: 1.50,
        expected_price_impact_pct: 1.00,
        pool_liquidity_usd: 1000000,
        pool_volume_24h_usd: 500000,
        gas_price_gwei: 100,
        network_avg_gas_price_gwei: 80,
        mempool_pending_txs: 5000,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      // Verify weighted average
      const expectedScore = 
        result.sandwich_risk * 0.50 +
        result.frontrun_risk * 0.30 +
        result.backrun_risk * 0.20;

      expect(Math.abs(result.overall_score - expectedScore)).toBeLessThan(0.1);
    });
  });

  describe('Confidence Scoring', () => {
    it('should calculate high confidence with complete data', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 10000,
        tx_value_usd: 10000,
        slippage_tolerance_pct: 0.50,
        expected_price_impact_pct: 0.30,
        pool_liquidity_usd: 5000000,
        pool_volume_24h_usd: 2000000,
        gas_price_gwei: 50,
        network_avg_gas_price_gwei: 50,
        mempool_pending_txs: 1000,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.confidence_score).toBeGreaterThanOrEqual(80);
    });

    it('should calculate lower confidence with incomplete data', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 10000,
        tx_value_usd: 10000,
        slippage_tolerance_pct: 0.50,
        expected_price_impact_pct: 0,
        pool_liquidity_usd: 0,
        pool_volume_24h_usd: 0,
        gas_price_gwei: 0,
        network_avg_gas_price_gwei: 0,
        mempool_pending_txs: 0,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.confidence_score).toBeLessThan(50);
    });
  });

  describe('Recommendations', () => {
    it('should provide critical recommendations for critical risk', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 500000,
        tx_value_usd: 500000,
        slippage_tolerance_pct: 5.00,
        expected_price_impact_pct: 3.00,
        pool_liquidity_usd: 100000,
        pool_volume_24h_usd: 50000,
        gas_price_gwei: 250,
        network_avg_gas_price_gwei: 100,
        mempool_pending_txs: 15000,
        block_time_seconds: 12,
        is_time_sensitive: true,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.recommendations).toContain('CRITICAL: Consider canceling this transaction');
      expect(result.recommendations).toContain('Use private mempool (Flashbots, Eden Network)');
    });

    it('should provide actionable recommendations for high risk', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 200000,
        tx_value_usd: 200000,
        slippage_tolerance_pct: 2.00,
        expected_price_impact_pct: 1.50,
        pool_liquidity_usd: 500000,
        pool_volume_24h_usd: 200000,
        gas_price_gwei: 150,
        network_avg_gas_price_gwei: 100,
        mempool_pending_txs: 8000,
        block_time_seconds: 12,
        is_time_sensitive: true,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.recommendations.length).toBeGreaterThan(2);
      expect(result.recommendations.some(r => r.includes('slippage'))).toBe(true);
    });

    it('should provide safe recommendation for low risk', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 1000,
        tx_value_usd: 1000,
        slippage_tolerance_pct: 0.30,
        expected_price_impact_pct: 0.20,
        pool_liquidity_usd: 10000000,
        pool_volume_24h_usd: 5000000,
        gas_price_gwei: 40,
        network_avg_gas_price_gwei: 50,
        mempool_pending_txs: 500,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.recommendations).toContain('Transaction appears safe to proceed');
    });
  });

  describe('Explanation Generation', () => {
    it('should generate comprehensive explanation', () => {
      const input: VulnerabilityInput = {
        amount_in_usd: 50000,
        tx_value_usd: 50000,
        slippage_tolerance_pct: 1.00,
        expected_price_impact_pct: 0.80,
        pool_liquidity_usd: 2000000,
        pool_volume_24h_usd: 1000000,
        gas_price_gwei: 80,
        network_avg_gas_price_gwei: 70,
        mempool_pending_txs: 3000,
        block_time_seconds: 12,
        is_time_sensitive: false,
      };

      const result = scorer.calculateVulnerability(input);

      expect(result.explanation).toContain('vulnerability');
      expect(result.explanation).toContain('Risk breakdown');
      expect(result.explanation.length).toBeGreaterThan(50);
    });
  });

  describe('Private Mempool Impact', () => {
    it('should significantly reduce frontrun risk with private mempool', () => {
      const baseInput: VulnerabilityInput = {
        amount_in_usd: 100000,
        tx_value_usd: 100000,
        slippage_tolerance_pct: 1.00,
        expected_price_impact_pct: 0.80,
        pool_liquidity_usd: 2000000,
        pool_volume_24h_usd: 1000000,
        gas_price_gwei: 150,
        network_avg_gas_price_gwei: 100,
        mempool_pending_txs: 8000,
        block_time_seconds: 12,
        is_time_sensitive: true,
        use_private_mempool: false,
      };

      const resultWithoutPrivate = scorer.calculateVulnerability(baseInput);
      const resultWithPrivate = scorer.calculateVulnerability({ ...baseInput, use_private_mempool: true });

      expect(resultWithPrivate.frontrun_risk).toBeLessThan(resultWithoutPrivate.frontrun_risk);
      expect(resultWithPrivate.overall_score).toBeLessThan(resultWithoutPrivate.overall_score);
    });
  });
});

