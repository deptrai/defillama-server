# DeFiLlama Complete Self-hosted Solution
# 100% FREE with unlimited connections
# Combines Supabase + Custom WebSocket + Redis + PostgreSQL

version: '3.8'

services:
  # PostgreSQL Database - Core data storage
  postgres:
    container_name: defillama-postgres
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: defillama
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=1000
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis - Caching and session storage
  redis:
    container_name: defillama-redis
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Kong API Gateway
  supabase-kong:
    container_name: defillama-supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8443:8443"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./supabase/kong.yml:/var/lib/kong/kong.yml:ro

  # Supabase Auth
  supabase-auth:
    container_name: defillama-supabase-auth
    image: supabase/gotrue:v2.158.1
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: true

  # Supabase REST API
  supabase-rest:
    container_name: defillama-supabase-rest
    image: postgrest/postgrest:v12.2.0
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      PGRST_OPENAPI_SERVER_PROXY_URI: ${API_EXTERNAL_URL}/rest/v1/
      PGRST_DB_SCHEMAS: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}

  # Supabase Realtime - Core WebSocket engine
  supabase-realtime:
    container_name: defillama-supabase-realtime
    image: supabase/realtime:v2.30.23
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: defillama
      API_JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY_BASE: ${REALTIME_SECRET_KEY_BASE}
      # DeFiLlama optimizations
      REALTIME_MAX_CONNECTIONS: 50000
      REALTIME_MAX_CHANNELS_PER_CLIENT: 1000
      REALTIME_MAX_JOINS_PER_SECOND: 10000
      REALTIME_MAX_EVENTS_PER_SECOND: 100000

  # Supabase Storage
  supabase-storage:
    container_name: defillama-supabase-storage
    image: supabase/storage-api:v0.46.4
    depends_on:
      postgres:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
    volumes:
      - storage_data:/var/lib/storage

  # DeFiLlama Custom WebSocket Server
  defillama-websocket:
    container_name: defillama-websocket
    build:
      context: ./supabase-websocket-handlers
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      supabase-realtime:
        condition: service_started
    environment:
      # Supabase connection
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      
      # WebSocket configuration
      DEFILLAMA_WEBSOCKET_PORT: 8080
      DEFILLAMA_WEBSOCKET_HOST: 0.0.0.0
      DEFILLAMA_MAX_CONNECTIONS: 50000
      DEFILLAMA_MAX_CHANNELS_PER_CONNECTION: 1000
      DEFILLAMA_MESSAGE_RATE_LIMIT: 10000
      DEFILLAMA_CONNECTION_TIMEOUT: 300
      
      # Database
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # API configuration
      DEFILLAMA_API_BASE_URL: http://supabase-kong:8000
      DEFILLAMA_CORS_ORIGINS: http://localhost:3000,https://defillama.com
      
      # Performance
      NODE_ENV: production
      UV_THREADPOOL_SIZE: 128
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # DeFiLlama Coins Service (adapted for Supabase)
  defillama-coins:
    container_name: defillama-coins
    build:
      context: ./coins
      dockerfile: Dockerfile.supabase
    restart: unless-stopped
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      defillama-websocket:
        condition: service_started
    environment:
      # Database
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # WebSocket
      WEBSOCKET_URL: http://defillama-websocket:8080
      
      # Supabase
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      
      # API
      PORT: 3005
      NODE_ENV: production
      
      # Disable external dependencies for free solution
      ERROR_REPORTS_DB: disabled
      ERROR_REPORTS_WEBHOOK: http://localhost:3000/dev/null
      R2_ACCESS_KEY_ID: disabled
      R2_SECRET_ACCESS_KEY: disabled
      R2_ENDPOINT: disabled
      ALLIUM_API_KEY: disabled
      FLIPSIDE_API_KEY: disabled

  # DeFiLlama DeFi Service (adapted for Supabase)
  defillama-defi:
    container_name: defillama-defi
    build:
      context: ./defi
      dockerfile: Dockerfile.supabase
    restart: unless-stopped
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      defillama-websocket:
        condition: service_started
    environment:
      # Database
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/defillama
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # WebSocket
      WEBSOCKET_URL: http://defillama-websocket:8080
      
      # Supabase
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      
      # API
      PORT: 3006
      NODE_ENV: production
      
      # Disable external dependencies
      ERROR_REPORTS_DB: disabled
      ERROR_REPORTS_WEBHOOK: http://localhost:3000/dev/null
      ACCOUNTS_DB: disabled
      ALLIUM_API_KEY: disabled
      FLIPSIDE_API_KEY: disabled

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    container_name: defillama-nginx
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - supabase-kong
      - defillama-websocket
      - defillama-coins
      - defillama-defi
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    container_name: defillama-prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (optional)
  grafana:
    container_name: defillama-grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: defillama-network
    driver: bridge
